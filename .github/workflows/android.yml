name: Android CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
          fetch-depth: 0
    
    - name: Validate Gradle Wrapper
      uses: gradle/wrapper-validation-action@v1
      
    - name: Set up signing key
      if: github.ref == 'refs/heads/main'
      run: |
        if [ ! -z "${{ secrets.KEY_STORE }}" ]; then
          echo keyStorePassword='${{ secrets.KEY_STORE_PASSWORD }}' >> local.properties
          echo keyAlias='${{ secrets.KEY_ALIAS }}' >> local.properties
          echo keyPassword='${{ secrets.KEY_PASSWORD }}' >> local.properties
          echo keyStore='${{ github.workspace }}/key.jks' >> local.properties
          echo ${{ secrets.KEY_STORE }} | base64 --decode > ${{ github.workspace }}/key.jks
        fi

    - name: Download JBR 17
      run: |
        download_url="https://cache-redirector.jetbrains.com/intellij-jbr/jbrsdk-17.0.7-linux-x64-b1000.6.tar.gz"
        wget -O $RUNNER_TEMP/jbr.tar.gz $download_url
        
    - name: Set up JBR 17
      uses: actions/setup-java@v3
      with:
          distribution: 'jdkfile'
          jdkFile: ${{ runner.temp }}/jbr.tar.gz
          java-version: '17'
          architecture: x64
    
    - name: Set up Golang
      uses: actions/setup-go@v4
      with:
        go-version-file: ${{ github.workspace }}/app/src/main/golang/go.mod
        cache-dependency-path: ${{ github.workspace }}/app/src/main/golang/go.sum
    
    - name: Set up NDK
      uses: nttld/setup-ndk@v1.2.0
      with:
        ndk-version: r26-beta1
        add-to-path: false
        local-cache: true
        
    - name: Build Golang library
      run: |
        go install golang.org/x/mobile/cmd/gomobile@latest
        gomobile init
        go generate app/src/main/golang/Geomag.go
      env:
        ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
    
    - name: Set up Gradle
      uses: gradle/gradle-build-action@v2
      with:
          gradle-home-cache-cleanup: true
    
    - name: Build with Gradle
      run: ./gradlew assembleRelease
    
    - name: Get release name
      if: success() && github.ref == 'refs/heads/main'
      id: release-name
      run: |
        name=`ls app/build/outputs/apk/release/*-arm64-v8a-release.apk | awk -F '(/|-arm64-v8a-release.apk)' '{print $6}'` && echo "name=${name}-release" >> $GITHUB_OUTPUT
    
    - name: Upload built apk
      if: success() && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.release-name.outputs.name }}
        path: app/build/outputs/apk/release/*.apk
    
    - name: Upload mappings
      if: success() && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: mappings
        path: app/build/outputs/mapping/release
